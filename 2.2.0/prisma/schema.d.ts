/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */





declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    model: NexusPrisma<TypeName, 'model'>
    crud: any
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  RegisterKeyValuePairInput: { // input type
    description?: string | null; // String
    name: string; // String!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  KeyValuePair: { // root type
    description?: string | null; // String
    name: string; // String!
  }
  Mutation: {};
  Query: {};
  RegisterKeyValuePairPayload: { // root type
    keyvaluepair: NexusGenRootTypes['KeyValuePair']; // KeyValuePair!
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  RegisterKeyValuePairInput: NexusGenInputs['RegisterKeyValuePairInput'];
}

export interface NexusGenFieldTypes {
  KeyValuePair: { // field return type
    description: string | null; // String
    name: string; // String!
  }
  Mutation: { // field return type
    _: string; // String!
    registerKeyValuePair: NexusGenRootTypes['RegisterKeyValuePairPayload']; // RegisterKeyValuePairPayload!
  }
  Query: { // field return type
    _: string; // String!
  }
  RegisterKeyValuePairPayload: { // field return type
    keyvaluepair: NexusGenRootTypes['KeyValuePair']; // KeyValuePair!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    registerKeyValuePair: { // args
      input?: NexusGenInputs['RegisterKeyValuePairInput'] | null; // RegisterKeyValuePairInput
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "KeyValuePair" | "Mutation" | "Query" | "RegisterKeyValuePairPayload";

export type NexusGenInputNames = "RegisterKeyValuePairInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}